# frozen_string_literal: true

require "spec_helper"
require "omniauth/strategies/clave"

RSpec.describe OmniAuth::Strategies::Clave do
  # subject is what the app responds
  subject { strategy.call(env) }

  let!(:organization) { create(:organization) }

  let(:strategy) do
    described_class.new(app,
                        "CLIENT_ID",
                        "CLIENT_SECRET",
                        "https://clave.example.es", {})
  end
  let(:app) do
    lambda do |env|
      [200, {}, [env["omniauth.auth"]]]
    end
  end
  let(:env) do
    {
      "HTTP_HOST" => organization.host,
      "rack.session" => {},
      "SCRIPT_NAME" => "",
      "PATH_INFO" => "/users/auth/clave/callback",
      "rack.input" => true,
      "rack.request.form_input" => true,
      "rack.request.form_hash" => { "SAMLResponse" => saml_response },
      "omniauth.strategy" => strategy
    }
  end
  let(:saml_response) do
    # rubocop: disable Layout/LineLength
    ""
    # rubocop: enable Layout/LineLength
  end

  let(:uid) { { "identifier" => "40447062K" } }
  let(:info) do
    {
      "email" => nil,
      "first_name" => "OLIVER",
      "first_surname" => "HERNANDEZ",
      "last_name" => "HERNANDEZ VALLS",
      "name" => "OLIVER HERNANDEZ VALLS",
      "nickname" => "oliver_hernandez_valls"
    }
  end

  before do
    OmniAuth.config.full_host = "http://localhost:3000"
    allow(strategy).to receive(:session).and_return({})
    Rails.application.secrets.omniauth[:clave] = {
      enabled: true,
      sp_entity_id: "S000000E_E00000000;SPTestApp",
      idp_sso_service_url: "https://clave.example.es",
      sp_certificate: File.read("spec/fixtures/sp_certificate.crt"),
      sp_private_key: File.read("spec/fixtures/sp_private_key.pem"),
      idp_certificate: File.read("spec/fixtures/idp_cert.cer")
    }
    strategy.options[:allowed_clock_drift] = 10.years
    Decidim::Clave.setup_clave_env(env)
  end

  it "has correct name" do
    expect(strategy.options.name).to eq("clave")
  end

  it "has correct args" do
    expect(strategy.class.args).to eq([:client_id, :client_secret, :idp_sso_service_url])
  end

  it "has correct site" do
    expect(strategy.options.idp_sso_service_url).to eq("https://clave.example.es")
  end

  it "has correct form" do
    expect(strategy.options[:form]).to be_a(Decidim::Clave::ClaveAutosubmitForm)
  end

  describe "callback_call" do
    let(:auth_hash) { subject.third.first }

    describe "uid" do
      it "returns the identifier" do
        expect(auth_hash.uid).to eq(uid["identifier"])
      end
    end

    describe "info" do
      it "returns the set of info fields" do
        expect(auth_hash.info).to eq(info)
      end
    end

    describe "#callback_url" do
      before do
        allow(strategy).to receive_messages(script_name: "", query_string: "")
      end

      it "is a combination of host, script name, and callback path" do
        expect(strategy.callback_url).to eq("http://localhost:3000/users/auth/clave/callback")
      end
    end

    it "parses response" do
      travel_to(Time.parse("2022-07-21T15:04:59.713Z")) do
        expect(subject.first).to eq(200)
        expect(subject.last.first.extra.response_object.errors).to be_empty
      end
    end
  end
end
# rubocop: enable Metrics/BlockLength
